services:
  redis:
    image: redis:alpine
    container_name: redis-server
    restart: unless-stopped
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "15672:15672"
    networks:
      - message-net
      - app-network

  ticket-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: ticket-db
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./src/services/ticket-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - db-network
  ticket-service-1:
    build:
      context: ./src/services
      dockerfile: ticket-service/Dockerfile
    container_name: ticket-service-1
    ports:
      - "9082:8082"
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_1}
    networks:
      - db-network
      - gateway1-net
      - message-net
  

  ticket-service-2:
    build:
      context: ./src/services
      dockerfile: ticket-service/Dockerfile
    container_name: ticket-service-2
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway2-net
      - message-net
  ticket-service-3:
    build:
      context: ./src/services
      dockerfile: ticket-service/Dockerfile
    container_name: ticket-service-3
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway3-net
      - message-net
  reservation-db:
      image: postgres:latest
      environment:
        POSTGRES_USER: ${DB_USER_RESERVATION}
        POSTGRES_PASSWORD: ${DB_PASSWORD_RESERVATION}
        POSTGRES_DB: ${DB_NAME_RESERVATION}
      container_name: reservation-db
      volumes:
        - db-data-reservation:/var/lib/postgresql/data
        - ./src/services/reservation-service/internal/db/init:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
        start_period: 10s
      networks:
        - db-network
        - payment-net

  reservation-service-1:
    build:
      context: ./src/services
      dockerfile: reservation-service/Dockerfile
    container_name: reservation-service-1
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_1}
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_1}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - db-network
      - gateway1-net 
      - payment-net
      - message-net
  reservation-service-2:
    build:
      context: ./src/services
      dockerfile: reservation-service/Dockerfile
    container_name: reservation-service-2
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_2}
      - USER_SERVICE_URL=${USER_SERVICE_2}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_2}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - db-network
      - gateway2-net
      - payment-net
      - message-net
  reservation-service-3:
    build:
      context: ./src/services
      dockerfile: reservation-service/Dockerfile
    container_name: reservation-service-3
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_3}
      - USER_SERVICE_URL=${USER_SERVICE_3}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_3}
      - RABBITMQ_URL=${RABBITMQ_URL}
    networks:
      - db-network
      - gateway3-net 
      - payment-net
      - message-net
  payment:
      container_name: payment
      build:
        context: ./src/services
        dockerfile: payment/Dockerfile
      environment:
      - SECRET_KEY=${SECRET_KEY}
      - RABBITMQ_URL=${RABBITMQ_URL}
      restart: unless-stopped
      ports:
        - "2512:8088"
      networks:
      - payment-net
      - message-net
  
  notification-service:
    container_name: notification-service
    build:
        context: ./src/services
        dockerfile: notification-service/Dockerfile
    environment:
      - MAILERSEND_API_KEY=${MAILERSEND_KEY}
      - MAILERSEND_TEMPLATE_ID=${MAILERSEND_TID}
      - MAILERSEND_EMAIL=${MAILERSEND_EMAIL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - message-net

  auth-1:
    build:
      context: ./src/services/auth
      dockerfile: ./cmd/Dockerfile

    container_name: auth-1
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    restart: unless-stopped
    networks:
      - db-network
      - gateway1-net
      - message-net
  auth-2:
    build:
      context: ./src/services/auth
      # dockerfile: ./src/services/auth/cmd/Dockerfile
      dockerfile: ./cmd/Dockerfile
    container_name: auth-2
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    ports:
      - "5459:8080"
    networks:
      - db-network
      - gateway2-net
      - message-net
  auth-3:
    build:
      context: ./src/services/auth
      dockerfile: ./cmd/Dockerfile
    container_name: auth-3
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    networks:
      - db-network
      - gateway3-net
      - message-net
  db-user:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_USER_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD_USER} 
      - POSTGRES_DB=${DB_NAME_USER}
    env_file:
      - .env
    ports:
      - "5420:5432"
    volumes:
      - ./src/services/user-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network

      
  user-service-1:
    build: 
      context: ./src/services
      dockerfile: user-service/Dockerfile
    container_name: user-service-1
    ports:
      - "2341:8081"
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway1-net
      - message-net  
  user-service-2:
    build: 
      context: ./src/services
      dockerfile: user-service/Dockerfile
    container_name: user-service-2
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway2-net
  user-service-3:
    build: 
      context: ./src/services
      dockerfile: user-service/Dockerfile
    container_name: user-service-3
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway3-net
      - message-net
  event-db:
    container_name: event-db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: eventdb
    volumes:
      - ./src/services/event-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network

  event-service-1:
    container_name: event-service-1
    build: 
      context: ./src/services
      dockerfile: event-service/Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_EVENT_HOST=${DB_EVENT_HOST}
      - DB_EVENT_PORT=${DB_EVENT_PORT}
      - DB_EVENT_USER=${DB_EVENT_USER}
      - DB_EVENT_PASSWORD=${DB_EVENT_PASSWORD}
      - DB_EVENT_NAME=${DB_EVENT_NAME}
      - DB_EVENT_SSLMODE=${DB_EVENT_SSLMODE}
    networks:
      - db-network
      - gateway1-net
      - message-net  

  event-service-2:
    container_name: event-service-2
    build: 
      context: ./src/services
      dockerfile: event-service/Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_EVENT_HOST=${DB_EVENT_HOST}
      - DB_EVENT_PORT=${DB_EVENT_PORT}
      - DB_EVENT_USER=${DB_EVENT_USER}
      - DB_EVENT_PASSWORD=${DB_EVENT_PASSWORD}
      - DB_EVENT_NAME=${DB_EVENT_NAME}
      - DB_EVENT_SSLMODE=${DB_EVENT_SSLMODE}
    networks:
      - db-network
      - gateway2-net
      - message-net
  event-service-3:
    container_name: event-service-3
    build: 
      context: ./src/services
      dockerfile: event-service/Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_EVENT_HOST=${DB_EVENT_HOST}
      - DB_EVENT_PORT=${DB_EVENT_PORT}
      - DB_EVENT_USER=${DB_EVENT_USER}
      - DB_EVENT_PASSWORD=${DB_EVENT_PASSWORD}
      - DB_EVENT_NAME=${DB_EVENT_NAME}
      - DB_EVENT_SSLMODE=${DB_EVENT_SSLMODE}
    networks:
      - db-network
      - gateway3-net
      - message-net
  vendor-db:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_VENDOR_VENDOR}
      - POSTGRES_PASSWORD=${DB_PASSWORD_VENDOR}
      - POSTGRES_DB=${DB_NAME_VENDOR}
    env_file:
      - .env
    ports:
      - "5432:5432"  
    volumes:
      - ./src/services/vendor-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_VENDOR_VENDOR}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network

  vendor-service:
    container_name: vendor-service
    build: 
        context: ./src/services
        dockerfile: vendor-service/Dockerfile
    depends_on:
       vendor-db:
           condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_VENDOR_HOST=${DB_VENDOR_HOST}
      - DB_PORT_VENDOR=${DB_PORT_VENDOR}
      - DB_VENDOR_VENDOR=${DB_VENDOR_VENDOR}
      - DB_PASSWORD_VENDOR=${DB_PASSWORD_VENDOR}
      - DB_NAME_VENDOR=${DB_NAME_VENDOR}
      - DB_SSLMODE_VENDOR=${DB_SSLMODE_VENDOR}
    networks:
      -  db-network
      - gateway1-net 
      - message-net
  gateway1:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-1
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_1}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_1}
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_1}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_1}
      - RESERVE_SERVICE_URL=${RESERVE_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - ticket-service-1
      - user-service-1
      - auth-1
    restart: unless-stopped
    networks:
      - app-network
      - gateway1-net 

  gateway2:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-2
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_2}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_2}
      - USER_SERVICE_URL=${USER_SERVICE_2}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_2}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_2}
      - RESERVE_SERVICE_URL=${RESERVE_SERVICE_2}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - ticket-service-2
      - user-service-2
      - auth-2
    restart: unless-stopped
    networks:
      - app-network
      - gateway2-net

  gateway3:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-3
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_3}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_3}
      - USER_SERVICE_URL=${USER_SERVICE_3}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_3}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_3}
      - RESERVE_SERVICE_URL=${RESERVE_SERVICE_3}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - ticket-service-3
      - user-service-3
      - auth-3
    restart: unless-stopped
    networks:
      - app-network
      - gateway3-net

  haproxy:
    build:
      context: src/haproxy
      dockerfile: Dockerfile
    ports:
      - "90:80"
    depends_on:
      - gateway1
      - gateway2
      - gateway3
    networks:
      - app-network

volumes:
  db-data:
  db-data-reservation:
networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
  gateway1-net:
    driver: bridge
  gateway2-net:
    driver: bridge
  gateway3-net:
    driver: bridge
  payment-net:
    driver: bridge
  message-net:
    driver: bridge

