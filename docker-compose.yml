services:
  redis:
    image: redis:alpine
    container_name: redis-server
    restart: unless-stopped
    networks:
      - app-network

  ticket-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: ticket-db
    ports:
      - "5434:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./src/services/ticket-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - db-network
  ticket-service-1:
    build:
      context: ./src/services/ticket-service
      dockerfile: Dockerfile
    container_name: ticket-service-1
    ports:
      - "9082:8082"
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway1-net 
  

  ticket-service-2:
    build:
      context: ./src/services/ticket-service
      dockerfile: Dockerfile
    container_name: ticket-service-2
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway2-net

  ticket-service-3:
    build:
      context: ./src/services/ticket-service
      dockerfile: Dockerfile
    container_name: ticket-service-3
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway3-net

  reservation-db:
      image: postgres:latest
      environment:
        POSTGRES_USER: ${DB_USER_RESERVATION}
        POSTGRES_PASSWORD: ${DB_PASSWORD_RESERVATION}
        POSTGRES_DB: ${DB_NAME_RESERVATION}
      container_name: reservation-db
      ports:
      - "5433:5432"
      volumes:
        - db-data-reservation:/var/lib/postgresql/data
        - ./src/services/reservation-service/internal/db/init:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
        start_period: 10s
      networks:
        - db-network

  reservation-service-1:
    build:
      context: ./src/services/reservation-service
      dockerfile: Dockerfile
    container_name: reservation-service-1
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    ports:
      - "9081:8081" #WILL BE REMOVED LATER
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
    networks:
      - db-network
      - gateway1-net 

  # payment:
  #     build:
  #       context: ./services/payment
  #     ports:
  #       - "8088:8088"
  #     env_file:
  #       - ./.env
  #     restart: unless-stopped

  auth:
    build:
      context: ./src/services/auth
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    restart: unless-stopped
    environment:
      - USER_SERVICE_URL=http://user-service-1:8080

    
  db-user:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userdb
    volumes:
      -  ./src/services/user-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network
      
  user-service-1:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service-1
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway1-net
  
  user-service-2:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service-2
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway2-net
  user-service-3:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service-3
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway3-net
  event-db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: eventdb
    volumes:
      - ./src/services/event-service/internal/db/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  event-service:
    build: 
      context: ./src/services/event-service
      dockerfile: Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network

  gateway1:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-1
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_1}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_1}
      - USER_SERVICE_URL=${USER_SERVICE_1}
    depends_on:
      - redis
      - ticket-service-1
    restart: unless-stopped
    networks:
      - app-network
      - gateway1-net 

  gateway2:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-2
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_2}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_2}
      - USER_SERVICE_URL=${USER_SERVICE_2}
    depends_on:
      - redis
      - ticket-service-2
    restart: unless-stopped
    networks:
      - app-network
      - gateway2-net

  gateway3:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-3
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_3}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_3}
      - USER_SERVICE_URL=${USER_SERVICE_3}
    depends_on:
      - redis
      - ticket-service-3
    restart: unless-stopped
    networks:
      - app-network
      - gateway3-net

  haproxy:
    build:
      context: src/haproxy
      dockerfile: Dockerfile
    ports:
      - "90:80"
    depends_on:
      - gateway1
      - gateway2
      - gateway3
    networks:
      - app-network

volumes:
  db-data:
  db-data-reservation:
networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
  gateway1-net:
    driver: bridge
  gateway2-net:
    driver: bridge
  gateway3-net:
    driver: bridge

