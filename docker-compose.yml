services:
  redis:
    image: redis:alpine
    container_name: redis-server
    restart: unless-stopped
    networks:
      - app-network

  ticket-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: ticket-db
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./src/services/ticket-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - db-network
  ticket-service-1:
    build:
      context: ./src/services/ticket-service
      dockerfile: Dockerfile
    container_name: ticket-service-1
    ports:
      - "9082:8082"
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway1-net 
    volumes:
      - ./src/services/ticket-service/logs:/app/logs
  

  ticket-service-2:
    build:
      context: ./src/services/ticket-service
      dockerfile: Dockerfile
    container_name: ticket-service-2
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway2-net
    volumes:
      - ./src/services/ticket-service/logs:/app/logs

  ticket-service-3:
    build:
      context: ./src/services/ticket-service
      dockerfile: Dockerfile
    container_name: ticket-service-3
    depends_on:
      ticket-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSLMODE=${DB_SSLMODE}
    networks:
      - db-network
      - gateway3-net
    volumes:
      - ./src/services/ticket-service/logs:/app/logs

  reservation-db:
      image: postgres:latest
      environment:
        POSTGRES_USER: ${DB_USER_RESERVATION}
        POSTGRES_PASSWORD: ${DB_PASSWORD_RESERVATION}
        POSTGRES_DB: ${DB_NAME_RESERVATION}
      container_name: reservation-db
      volumes:
        - db-data-reservation:/var/lib/postgresql/data
        - ./src/services/reservation-service/internal/db/init:/docker-entrypoint-initdb.d
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 5
        start_period: 10s
      networks:
        - db-network

  reservation-service-1:
    build:
      context: ./src/services/reservation-service
      dockerfile: Dockerfile
    container_name: reservation-service-1
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
    networks:
      - db-network
      - gateway1-net 
    volumes:
      - ./src/services/reservation-service/logs:/app/logs

  reservation-service-2:
    build:
      context: ./src/services/reservation-service
      dockerfile: Dockerfile
    container_name: reservation-service-2
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
    networks:
      - db-network
      - gateway2-net 
    volumes:
      - ./src/services/reservation-service/logs:/app/logs
  reservation-service-3:
    build:
      context: ./src/services/reservation-service
      dockerfile: Dockerfile
    container_name: reservation-service-3
    depends_on:
      ticket-db:
        condition: service_healthy
      reservation-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_HOST=${DB_HOST_RESERVATION}
      - DB_PORT=${DB_PORT_RESERVATION}
      - DB_USER=${DB_USER_RESERVATION}
      - DB_PASSWORD=${DB_PASSWORD_RESERVATION}
      - DB_NAME=${DB_NAME_RESERVATION}
      - DB_SSLMODE=${DB_SSLMODE_RESERVATION}
    networks:
      - db-network
      - gateway3-net 
    volumes:
      - ./src/services/reservation-service/logs:/app/logs

  payment:
      build:
        context: ./src/services/payment
      ports:
        - "8088:8088"
      env_file:
        - ./.env
      restart: unless-stopped
      volumes:
        - ./src/services/payment/logs/service.log:/app/logs/service.log

  auth-1:
    build:
      context: ./src/services/auth
      dockerfile: ./cmd/Dockerfile

    container_name: auth-1
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    restart: unless-stopped
    networks:
      - db-network
      - gateway1-net
    volumes:
      - ./src/services/auth/logs/service.log:/app/logs/service.log
  
  auth-2:
    build:
      context: ./src/services/auth
      # dockerfile: ./src/services/auth/cmd/Dockerfile
      dockerfile: ./cmd/Dockerfile
    container_name: auth-2
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    ports:
      - "5459:8080"
    networks:
      - db-network
      - gateway2-net
    volumes:
      - ./src/services/auth/logs/service.log:/app/logs/service.log

  auth-3:
    build:
      context: ./src/services/auth
      dockerfile: ./cmd/Dockerfile
    container_name: auth-3
    environment:
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    restart: unless-stopped
    networks:
      - db-network
      - gateway3-net
    volumes:
      - ./src/services/auth/logs/service.log:/app/logs/service.log

  db-user:
    image: postgres:15
    environment:
      - POSTGRES_USER=${DB_USER_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD_USER} 
      - POSTGRES_DB=${DB_NAME_USER}
    env_file:
      - .env
    ports:
      - "5420:5432"
    volumes:
      - ./src/services/user-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network

      
  user-service-1:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service-1
    ports:
      - "2341:8081"
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway1-net
    volumes:
      - ./src/services/user-service/logs/service.log:/app/logs/service.log
  
  user-service-2:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service-2
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway2-net
    volumes:
      - ./src/services/user-service/logs/service.log:/app/logs/service.log

  user-service-3:
    build: 
      context: ./src/services/user-service
      dockerfile: Dockerfile
    container_name: user-service-3
    env_file:
      - .env
    depends_on:
      db-user:  
        condition: service_healthy  
    networks:
      - db-network
      - gateway3-net
    volumes:
      - ./src/services/user-service/logs/service.log:/app/logs/service.log

  event-db:
    container_name: event-db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: eventdb
    volumes:
      - ./src/services/event-service/internal/db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db-network

  event-service-1:
    container_name: event-service-1
    build: 
      context: ./src/services/event-service
      dockerfile: Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_EVENT_HOST=${DB_EVENT_HOST}
      - DB_EVENT_PORT=${DB_EVENT_PORT}
      - DB_EVENT_USER=${DB_EVENT_USER}
      - DB_EVENT_PASSWORD=${DB_EVENT_PASSWORD}
      - DB_EVENT_NAME=${DB_EVENT_NAME}
      - DB_EVENT_SSLMODE=${DB_EVENT_SSLMODE}
    networks:
      - db-network
      - gateway1-net
    volumes:
      - ./src/services/event-service/logs/service.log:/app/logs/service.log
  

  event-service-2:
    container_name: event-service-2
    build: 
      context: ./src/services/event-service
      dockerfile: Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_EVENT_HOST=${DB_EVENT_HOST}
      - DB_EVENT_PORT=${DB_EVENT_PORT}
      - DB_EVENT_USER=${DB_EVENT_USER}
      - DB_EVENT_PASSWORD=${DB_EVENT_PASSWORD}
      - DB_EVENT_NAME=${DB_EVENT_NAME}
      - DB_EVENT_SSLMODE=${DB_EVENT_SSLMODE}
    networks:
      - db-network
      - gateway2-net
    volumes:
      - ./src/services/event-service/logs/service.log:/app/logs/service.log

  event-service-3:
    container_name: event-service-3
    build: 
      context: ./src/services/event-service
      dockerfile: Dockerfile
    depends_on:
      event-db:
        condition: service_healthy
    environment:
      - DOCKER_COMPOSE=true
      - DB_EVENT_HOST=${DB_EVENT_HOST}
      - DB_EVENT_PORT=${DB_EVENT_PORT}
      - DB_EVENT_USER=${DB_EVENT_USER}
      - DB_EVENT_PASSWORD=${DB_EVENT_PASSWORD}
      - DB_EVENT_NAME=${DB_EVENT_NAME}
      - DB_EVENT_SSLMODE=${DB_EVENT_SSLMODE}
    networks:
      - db-network
      - gateway3-net
    volumes:
      - ./src/services/event-service/logs/service.log:/app/logs/service.log

  gateway1:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-1
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_1}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_1}
      - USER_SERVICE_URL=${USER_SERVICE_1}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_1}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_1}
      - RESERVE_SERVICE_URL=${RESERVE_SERVICE_1}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - ticket-service-1
      - user-service-1
      - auth-1
    restart: unless-stopped
    networks:
      - app-network
      - gateway1-net 

  gateway2:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-2
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_2}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_2}
      - USER_SERVICE_URL=${USER_SERVICE_2}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_2}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_2}
      - RESERVE_SERVICE_URL=${RESERVE_SERVICE_2}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - ticket-service-2
      - user-service-2
      - auth-2
    restart: unless-stopped
    networks:
      - app-network
      - gateway2-net

  gateway3:
    build:
      context: .
      dockerfile: src/gateway/Dockerfile
    container_name: express-gateway-3
    environment:
      - REDIS_URL=${REDIS_URL}
      - INSTANCE_NAME=${INSTANCE_NAME_3}
      - TICKET_SERVICE_URL=${TICKET_SERVICE_3}
      - USER_SERVICE_URL=${USER_SERVICE_3}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_3}
      - EVENT_SERVICE_URL=${EVENT_SERVICE_3}
      - RESERVE_SERVICE_URL=${RESERVE_SERVICE_3}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - redis
      - ticket-service-3
      - user-service-3
      - auth-3
    restart: unless-stopped
    networks:
      - app-network
      - gateway3-net

  haproxy:
    build:
      context: src/haproxy
      dockerfile: Dockerfile
    ports:
      - "90:80"
    depends_on:
      - gateway1
      - gateway2
      - gateway3
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml


  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - ./src/services/payment/logs:/app/logs
      - ./src/services/auth/logs:/app/logs
      - ./src/services/event-service/logs:/app/logs
      - ./src/services/reservation-service/logs:/app/logs
      - ./src/services/ticker-service/logs:/app/logs
      - ./src/services/user-service/logs:/app/logs
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
      - ./logs:/var/log
      - ./positions:/positions
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - loki

volumes:
  db-data:
  db-data-reservation:
  grafana-data:
  loki-data:
  prometheus-data:

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
  gateway1-net:
    driver: bridge
  gateway2-net:
    driver: bridge
  gateway3-net:
    driver: bridge

